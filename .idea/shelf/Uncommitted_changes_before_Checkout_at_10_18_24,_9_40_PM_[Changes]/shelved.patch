Index: app/src/main/java/com/example/fitquest/pages/ForYouPage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fitquest.pages\n\nimport android.widget.Toast\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.Divider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Dialog\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.compose.ui.zIndex\nimport androidx.navigation.NavController\nimport com.example.fitquest.AuthState\nimport com.example.fitquest.AuthViewModel\nimport com.example.fitquest.UserProfile\nimport com.example.fitquest.ui.theme.brightOrange\nimport com.example.fitquest.ui.theme.transparent\nimport com.google.ai.client.generativeai.type.content\nimport com.google.firebase.Firebase\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.database.database\n\n@Composable\nfun ForYouPage(modifier: Modifier = Modifier, navController: NavController, authViewModel: AuthViewModel) {\n    val authState = authViewModel.authState.observeAsState()\n    val context = LocalContext.current\n\n    var userProfile by remember { mutableStateOf<UserProfile?>(null) }\n    val database = Firebase.database //initialize an instance of the realtime database\n    val userID = FirebaseAuth.getInstance().uid\n\n    LaunchedEffect(authState.value) {\n        when (authState.value) {\n            is AuthState.Unauthenticated -> navController.navigate(\"login\")\n            is AuthState.Authenticated -> {\n                userID?.let { id ->\n                    val userRef = database.getReference(\"Users\")\n                        .child(id) // points to the Users node in firebase\n\n                    userRef.get()\n                        .addOnSuccessListener { dataSnapshot ->     //sends a request to retrieve info in firebase\n                            userProfile =\n                                dataSnapshot.getValue(UserProfile::class.java) //converts the info into a user profile object\n                        }.addOnFailureListener {\n                        Toast.makeText(context, \"Failed to retrieve user data\", Toast.LENGTH_SHORT)\n                            .show()\n                    }\n                }\n            }\n\n            else -> Unit\n        }\n    }\n\n    userProfile?.let { profile ->\n        Column(\n            modifier = modifier\n                .fillMaxSize()\n                .background(Color.DarkGray)\n                .padding(16.dp)\n        ) {\n            Row(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(bottom = 16.dp),\n                horizontalArrangement = Arrangement.SpaceBetween,\n                verticalAlignment = Alignment.CenterVertically\n            )\n            {\n                Text(\"FitQuest\", fontSize = 32.sp, fontWeight = FontWeight.Bold, color = Color(0xFFFF6D00))\n\n\n                //Plan is to make the circle the pfp but for now i just put the username in there\n                Box(\n                    modifier = Modifier\n                        .size(100.dp)\n                        .clip(CircleShape)\n                        .background(Color.Gray),\n                    contentAlignment = Alignment.Center\n                ) {\n                    Text(profile.username, fontSize = 20.sp, color = Color.White) //profile username\n                }\n            }\n\n//            // Display XP Progress Bar probably dont need this\n//            Text(\"XP\", color = Color.White, fontSize = 14.sp)\n//            LinearProgressIndicator(\n//                progress = 0.7f,\n//                color = Color(0xFFFF6D00),\n//                trackColor = Color.LightGray,\n//                modifier = Modifier\n//                    .fillMaxWidth()\n//                    .height(8.dp)\n//                    .padding(vertical = 8.dp)\n//            )\n\n\n            // This displays the streak\n            // i think the future plan is to have a fire emoji or something around it\n            Row(\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = \"STREAK\",\n                    color = Color.White,\n                    fontWeight = FontWeight.Light,\n                    fontSize = 18.sp\n                )\n                Spacer(modifier = Modifier.width(8.dp))\n                Text(\n                    text = profile.streak.toString(),\n                    color = Color.White,\n                    fontSize = 18.sp,\n                    fontWeight = FontWeight.Bold\n                )\n            }\n            Column(\n            ) {\n                Row (\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(bottom = 16.dp),\n                    horizontalArrangement = Arrangement.SpaceBetween,\n                    verticalAlignment = Alignment.CenterVertically\n                ){\n                    Text(\"Daily\", fontSize = 32.sp, fontWeight = FontWeight.Bold, color = Color.White)\n                }\n                Box(\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(bottom = 16.dp)\n                ) {\n                    Spacer(modifier = Modifier.width(8.dp))\n                }\n                Text(text = \"hello\")\n\n                Row (\n                    modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(bottom = 16.dp),\n                    horizontalArrangement = Arrangement.SpaceBetween,\n                    verticalAlignment = Alignment.CenterVertically)\n                {\n                    Text(\"Weekly\", fontSize = 32.sp, fontWeight = FontWeight.Bold, color = Color.White)\n                    Spacer(modifier = Modifier.width(8.dp))\n                }\n                Row (\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(bottom = 16.dp),\n                    horizontalArrangement = Arrangement.SpaceBetween,\n                    verticalAlignment = Alignment.CenterVertically\n                ) {\n                    Text(\"Recommended\", fontSize = 32.sp, fontWeight = FontWeight.Bold, color = Color.White)\n                    Spacer(modifier = Modifier.width(20.dp))\n                }\n            }\n        }\n    }\n}\n\n\n@Composable\nfun PopupBox(popupWidth: Float, popupHeight:Float, showPopup: Boolean, onClickOutside: () -> Unit, content: @Composable() () -> Unit) {\n\n    if (showPopup) {\n        // full screen background\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(Color.Green)\n                .zIndex(10F),\n            contentAlignment = Alignment.Center\n        ) {\n            // popup\n            Popup(\n                alignment = Alignment.Center,\n                properties = PopupProperties(\n                    excludeFromSystemGesture = true,\n                ),\n                // to dismiss on click outside\n                onDismissRequest = { onClickOutside() }\n            ) {\n                Box(\n                    Modifier\n                        .width(popupWidth.dp)\n                        .height(popupHeight.dp)\n                        .background(Color.White)\n                        .clip(RoundedCornerShape(4.dp)),\n                    contentAlignment = Alignment.Center\n                ) {\n                    content()\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun PopupButton() {\n    var showDialog by remember { mutableStateOf(false) }\n\n    Button(onClick = { showDialog = true },\n        colors = ButtonDefaults.buttonColors(\n            contentColor = Color.Transparent\n        )\n    ) {\n        Text(\"Show Popup\")\n    }\n\n    if (showDialog) {\n        AlertDialog(\n            onDismissRequest = { showDialog = false },\n            title = { Text(\"Popup Title\") },\n            text = { Text(\"This is a popup message.\") },\n            confirmButton = {\n                Button(onClick = { showDialog = false }) {\n                    Text(\"OK\")\n                }\n                Button(onClick = { showDialog = false }) {\n                    Text(\"OK\")\n                }\n            }\n        )\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fitquest/pages/ForYouPage.kt b/app/src/main/java/com/example/fitquest/pages/ForYouPage.kt
--- a/app/src/main/java/com/example/fitquest/pages/ForYouPage.kt	(revision 21cb2ddf904fe685539b70ff67877464e048879e)
+++ b/app/src/main/java/com/example/fitquest/pages/ForYouPage.kt	(date 1729301939745)
@@ -264,4 +264,5 @@
             }
         )
     }
-}
\ No newline at end of file
+}
+
